services:
  postgresql:
    image: postgres:17.2
    container_name: postgresql
    restart: on-failure
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: hang
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - backend
  redis:
    image: redis:latest
    container_name: redis
    restart: on-failure
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - backend
  rabbitmq:
    image: rabbitmq:3.13.7-management-alpine
    container_name: rabbitmq
    restart: on-failure
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    networks:
      - backend

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: on-failure
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    networks:
      - monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: on-failure
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: on-failure
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml
      - ./data/tempo:/tmp/tempo
    ports:
      - "3110:3100"  # Tempo
      - "9411:9411" # zipkin
    networks:
      - monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: on-failure
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources
      - ./data/grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: on-failure
    command:
      - --config.file=/etc/alertmanager/config.yml
    volumes:
      - ./docker/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
    ports:
      - "9093:9093"
    networks:
      - monitoring
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - backend
      - monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    networks:
      - backend
      - monitoring
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.3
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./docker/elk/es.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: elastic
      discovery.type: single-node
      http.port: 9200
      http.cors.allow-origin: http://localhost:1358, http://127.0.0.1:1358
      http.cors.enabled: true
      http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      http.cors.allow-credentials: true
      xpack.security.enabled: false
    networks:
      - backend
      - monitoring
  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.3
    container_name: logstash
    volumes:
      - ./docker/elk/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./docker/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro,Z
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: logstash
    networks:
      - backend
      - monitoring
    depends_on:
      - elasticsearch
    restart: unless-stopped
  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.3
    container_name: kibana
    volumes:
      - ./docker/elk/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      KIBANA_SYSTEM_PASSWORD: kibana
    networks:
      - backend
      - monitoring
    depends_on:
      - elasticsearch
    restart: unless-stopped
volumes:
  data:
networks:
  monitoring:
    driver: bridge
    name: monitoring
  backend:
    driver: bridge
    name: backend